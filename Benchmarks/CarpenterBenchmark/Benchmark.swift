// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import os.log
import CarpenterTestUtilities

let logger = Logger(subsystem: "com.tiziano.carpenter.benchmarks", category: "Carpenter Benchmarks")

let benchmarks = {
    Benchmark("Creating container") { benchmark in
        let signposter = OSSignposter(logger: logger)

        for _ in benchmark.scaledIterations {
            let id = signposter.makeSignpostID()
            signposter.withIntervalSignpost("Running Carpenter", id: id) {
                let generatedByCarpenter = GeneratedByCarpenter()

                let c = signposter.withIntervalSignpost("Creating container", id: id) {
                    benchmark.startMeasurement()
                    let result = generatedByCarpenter.makeContainer()
                    benchmark.stopMeasurement()
                    return result
                }

                blackHole(c)
            }
        }
    }

    Benchmark("Accessing container") { benchmark in
        let signposter = OSSignposter(logger: logger)

        for _ in benchmark.scaledIterations {
            let id = signposter.makeSignpostID()
            signposter.withIntervalSignpost("Running Carpenter", id: id) {
                let generatedByCarpenter = GeneratedByCarpenter()

                let c = signposter.withIntervalSignpost("Creating container", id: id) {
                    generatedByCarpenter.makeContainer()
                }

                signposter.withIntervalSignpost("Accessing container") {
                    benchmark.startMeasurement()
                    generatedByCarpenter.accessAllInContainer(c)
                    benchmark.stopMeasurement()
                }
            }
        }
    }

    Benchmark("Complete") { benchmark in
        let signposter = OSSignposter(logger: logger)

        for _ in benchmark.scaledIterations {
            let id = signposter.makeSignpostID()
            signposter.withIntervalSignpost("Running Carpenter", id: id) {
                let generatedByCarpenter = GeneratedByCarpenter()
                benchmark.startMeasurement()
                let c = generatedByCarpenter.makeContainer()
                generatedByCarpenter.accessAllInContainer(c)
                benchmark.stopMeasurement()
            }
        }
    }
}
